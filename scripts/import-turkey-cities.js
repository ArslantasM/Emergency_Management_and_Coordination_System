const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function importTurkeyCities() {
  try {
    console.log('üáπüá∑ T√ºrkiye illeri (≈üehirler) import ediliyor...\n');
    
    // T√ºrkiye ID'sini bul
    const turkey = await prisma.country.findFirst({
      where: { 
        OR: [
          { name: 'Republic of Turkey' },
          { name: 'Turkey' },
          { iso2: 'TR' }
        ]
      }
    });
    
    if (!turkey) {
      console.log('‚ùå T√ºrkiye bulunamadƒ±!');
      return;
    }
    
    console.log(`‚úÖ T√ºrkiye bulundu: ${turkey.name} (ID: ${turkey.id})\n`);
    
    // Mevcut T√ºrkiye ≈üehirlerini kontrol et
    const existingCities = await prisma.city.findMany({
      where: { country_id: turkey.id },
      select: { name: true }
    });
    
    console.log(`üìä Mevcut T√ºrkiye ≈üehirleri: ${existingCities.length}\n`);
    
    // Geonames dosyasƒ±nƒ± oku
    console.log('üìñ Geonames dosyasƒ± okunuyor...');
    const geonamesFile = JSON.parse(fs.readFileSync('data/geonames.json', 'utf8'));
    const provinces = geonamesFile.provinces || [];
    console.log(`‚úÖ ${provinces.length} il kaydƒ± y√ºklendi\n`);
    
    // T√ºrkiye illerini City tablosuna ekle
    console.log('üèôÔ∏è ƒ∞ller ≈üehir olarak ekleniyor...');
    let cityCount = 0;
    let cityErrors = 0;
    let skipped = 0;
    
    for (const province of provinces) {
      try {
        // Aynƒ± isimde ≈üehir var mƒ± kontrol et
        const existingCity = existingCities.find(city => 
          city.name.toLowerCase() === province.name.toLowerCase()
        );
        
        if (existingCity) {
          console.log(`‚ö†Ô∏è Zaten mevcut: ${province.name}`);
          skipped++;
          continue;
        }
        
        await prisma.city.create({
          data: {
            geonameid: parseInt(province.geonameid) || 0,
            name: province.name,
            asciiname: province.asciiname || province.name,
            country_id: turkey.id,
            latitude: parseFloat(province.latitude) || 0,
            longitude: parseFloat(province.longitude) || 0,
            population: parseInt(province.population) || 0,
            timezone: province.timezone || 'Europe/Istanbul',
            admin1_code: province.admin1_code || null
          }
        });
        
        cityCount++;
        
        if (cityCount % 10 === 0) {
          console.log(`‚úÖ ${cityCount} il eklendi...`);
        }
        
      } catch (error) {
        console.log(`‚ùå ƒ∞l eklenirken hata: ${province.name} - ${error.message}`);
        cityErrors++;
      }
    }
    
    console.log(`\nüèôÔ∏è ƒ∞l import tamamlandƒ±:`);
    console.log(`‚úÖ ${cityCount} yeni il eklendi`);
    console.log(`‚ö†Ô∏è ${skipped} il zaten mevcuttu`);
    console.log(`‚ùå ${cityErrors} hata olu≈ütu`);
    
    // Son durum
    const finalCities = await prisma.city.findMany({
      where: { country_id: turkey.id },
      select: { name: true }
    });
    
    console.log(`\nüìä Toplam T√ºrkiye ≈üehirleri: ${finalCities.length}`);
    
  } catch (error) {
    console.error('‚ùå Import hatasƒ±:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importTurkeyCities(); 