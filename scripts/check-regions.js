const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkRegions() {
  try {
    console.log('üîç Region tablosu kontrol ediliyor...\n');

    // Tablo var mƒ± kontrol et
    try {
      const regions = await prisma.region.findMany({
        take: 5
      });
      console.log('‚úÖ Region tablosu mevcut');
    } catch (error) {
      console.log('‚ùå Region tablosu bulunamadƒ±:', error.message);
      return;
    }

    // Toplam kayƒ±t sayƒ±sƒ±
    const totalCount = await prisma.region.count();
    console.log(`üìä Toplam b√∂lge sayƒ±sƒ±: ${totalCount}`);

    // Tip bazƒ±nda sayƒ±lar
    const countryCount = await prisma.region.count({ where: { type: 'COUNTRY' } });
    const cityCount = await prisma.region.count({ where: { type: 'CITY' } });
    const districtCount = await prisma.region.count({ where: { type: 'DISTRICT' } });
    const regionCount = await prisma.region.count({ where: { type: 'REGION' } });

    console.log(`üèõÔ∏è √úlkeler: ${countryCount}`);
    console.log(`üèôÔ∏è ≈ûehirler: ${cityCount}`);
    console.log(`üèòÔ∏è ƒ∞l√ßeler: ${districtCount}`);
    console.log(`üó∫Ô∏è B√∂lgeler: ${regionCount}`);

    // √ñrnek veriler
    if (countryCount > 0) {
      console.log('\nüåç √úlke √∂rnekleri:');
      const countries = await prisma.region.findMany({
        where: { type: 'COUNTRY' },
        take: 5
      });
      countries.forEach(country => {
        console.log(`  - ${country.name} (${country.code})`);
      });
    }

    if (cityCount > 0) {
      console.log('\nüèôÔ∏è ≈ûehir √∂rnekleri:');
      const cities = await prisma.region.findMany({
        where: { type: 'CITY' },
        include: {
          parent: true
        },
        take: 5
      });
      cities.forEach(city => {
        console.log(`  - ${city.name} (${city.parent?.name || 'Parent yok'})`);
      });
    }

    if (districtCount > 0) {
      console.log('\nüèòÔ∏è ƒ∞l√ße √∂rnekleri:');
      const districts = await prisma.region.findMany({
        where: { type: 'DISTRICT' },
        include: {
          parent: {
            include: {
              parent: true
            }
          }
        },
        take: 5
      });
      districts.forEach(district => {
        const city = district.parent?.name || '≈ûehir yok';
        const country = district.parent?.parent?.name || '√úlke yok';
        console.log(`  - ${district.name} (${city}, ${country})`);
      });
    }

    // Hiyerar≈üi kontrol√º
    console.log('\nüå≥ Hiyerar≈üi kontrol√º:');
    const countriesWithChildren = await prisma.region.findMany({
      where: { type: 'COUNTRY' },
      include: {
        children: {
          include: {
            children: true
          }
        }
      },
      take: 3
    });

    countriesWithChildren.forEach(country => {
      console.log(`\n${country.name}:`);
      console.log(`  ≈ûehirler: ${country.children.length}`);
      country.children.forEach(city => {
        console.log(`    - ${city.name} (${city.children.length} il√ße)`);
      });
    });

  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
  checkRegions();
}

module.exports = { checkRegions }; 