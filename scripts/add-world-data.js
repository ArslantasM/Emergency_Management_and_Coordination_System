const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addWorldData() {
  try {
    console.log('üåç D√ºnya geneli veri ekleme ba≈ülƒ±yor...\n');

    // √ñnce mevcut verileri kontrol et
    const existingCountries = await prisma.region.count({
      where: { type: 'COUNTRY' }
    });
    
    console.log(`üìä Mevcut √ºlke sayƒ±sƒ±: ${existingCountries}`);

    // √úlkeler
    const countries = [
      { name: 'T√ºrkiye', code: 'TR' },
      { name: 'Amerika Birle≈üik Devletleri', code: 'US' },
      { name: 'Almanya', code: 'DE' },
      { name: 'Fransa', code: 'FR' },
      { name: 'ƒ∞talya', code: 'IT' },
      { name: 'ƒ∞spanya', code: 'ES' },
      { name: 'Birle≈üik Krallƒ±k', code: 'GB' },
      { name: 'Japonya', code: 'JP' },
      { name: '√áin', code: 'CN' },
      { name: 'Hindistan', code: 'IN' }
    ];

    for (const countryData of countries) {
      // √úlke var mƒ± kontrol et
      let country = await prisma.region.findFirst({
        where: { 
          name: countryData.name,
          type: 'COUNTRY'
        }
      });

      if (!country) {
        // √úlke yoksa olu≈ütur
        country = await prisma.region.create({
          data: {
            name: countryData.name,
            code: countryData.code,
            type: 'COUNTRY'
          }
        });
        console.log(`‚úÖ ${countryData.name} √ºlkesi eklendi`);
      } else {
        console.log(`‚è≠Ô∏è  ${countryData.name} √ºlkesi zaten mevcut`);
      }

      // Bu √ºlke i√ßin ≈üehirler var mƒ± kontrol et
      const existingCities = await prisma.region.count({
        where: {
          parentId: country.id,
          type: 'CITY'
        }
      });

      if (existingCities === 0) {
        // ≈ûehirler ekle
        await addCitiesForCountry(country.id, countryData.code);
      } else {
        console.log(`  ‚è≠Ô∏è  ${countryData.name} i√ßin ≈üehirler zaten mevcut`);
      }
    }

    console.log('\n‚úÖ D√ºnya geneli veriler ba≈üarƒ±yla eklendi!');
    
    // Son durum
    const finalCountries = await prisma.region.count({ where: { type: 'COUNTRY' } });
    const finalCities = await prisma.region.count({ where: { type: 'CITY' } });
    const finalDistricts = await prisma.region.count({ where: { type: 'DISTRICT' } });
    
    console.log(`üìä Final durum:`);
    console.log(`   √úlkeler: ${finalCountries}`);
    console.log(`   ≈ûehirler: ${finalCities}`);
    console.log(`   ƒ∞l√ßeler: ${finalDistricts}`);

  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function addCitiesForCountry(countryId, countryCode) {
  const citiesData = {
    'TR': [
      { name: 'ƒ∞stanbul', code: '34', districts: ['Kadƒ±k√∂y', 'Be≈üikta≈ü', '≈ûi≈üli', 'Fatih', '√úsk√ºdar'] },
      { name: 'Ankara', code: '06', districts: ['√áankaya', 'Ke√ßi√∂ren', 'Yenimahalle', 'Mamak'] },
      { name: 'ƒ∞zmir', code: '35', districts: ['Konak', 'Kar≈üƒ±yaka', 'Bornova', 'Buca'] }
    ],
    'US': [
      { name: 'New York', code: 'NY', districts: ['Manhattan', 'Brooklyn', 'Queens', 'Bronx'] },
      { name: 'Los Angeles', code: 'LA', districts: ['Hollywood', 'Beverly Hills', 'Santa Monica'] },
      { name: 'Chicago', code: 'CHI', districts: ['Downtown', 'North Side', 'South Side'] }
    ],
    'DE': [
      { name: 'Berlin', code: 'BER', districts: ['Mitte', 'Kreuzberg', 'Charlottenburg'] },
      { name: 'Hamburg', code: 'HAM', districts: ['Altona', 'Eimsb√ºttel', 'Wandsbek'] },
      { name: 'M√ºnchen', code: 'MUN', districts: ['Altstadt', 'Maxvorstadt', 'Schwabing'] }
    ],
    'FR': [
      { name: 'Paris', code: 'PAR', districts: ['1er arr.', '2e arr.', '3e arr.'] },
      { name: 'Lyon', code: 'LYO', districts: ['1er arr.', '2e arr.', '3e arr.'] },
      { name: 'Marseille', code: 'MAR', districts: ['1er arr.', '2e arr.', '3e arr.'] }
    ],
    'GB': [
      { name: 'London', code: 'LON', districts: ['Westminster', 'Camden', 'Islington'] },
      { name: 'Manchester', code: 'MAN', districts: ['City Centre', 'Northern Quarter', 'Ancoats'] },
      { name: 'Birmingham', code: 'BIR', districts: ['City Centre', 'Digbeth', 'Jewellery Quarter'] }
    ]
  };

  const cities = citiesData[countryCode] || [
    { name: 'Ba≈ükent', code: '001', districts: ['Merkez', 'Kuzey', 'G√ºney'] },
    { name: 'B√ºy√ºk ≈ûehir', code: '002', districts: ['Doƒüu', 'Batƒ±', 'Merkez'] }
  ];

  for (const cityData of cities) {
    // ≈ûehir olu≈ütur
    const newCity = await prisma.region.create({
      data: {
        name: cityData.name,
        code: cityData.code,
        type: 'CITY',
        parentId: countryId
      }
    });
    
    console.log(`  ‚úÖ ${cityData.name} ≈üehri eklendi`);
    
    // ƒ∞l√ßeler ekle
    for (const districtName of cityData.districts) {
      await prisma.region.create({
        data: {
          name: districtName,
          code: `${cityData.code}-${districtName.substring(0, 3).toUpperCase()}`,
          type: 'DISTRICT',
          parentId: newCity.id
        }
      });
    }
    console.log(`    ‚úÖ ${cityData.districts.length} il√ße eklendi`);
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
  addWorldData();
}

module.exports = { addWorldData }; 